package com.example.leetcode.bit;

/**
 * 颠倒二进制位
 */
public class ReverseBits {
    /**
     * 颠倒给定的 32 位无符号整数的二进制位。
     *
     * 示例 1：
     *
     * 输入: 00000010100101000001111010011100
     * 输出: 00111001011110000010100101000000
     * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
     * 示例 2：
     *
     * 输入：11111111111111111111111111111101
     * 输出：10111111111111111111111111111111
     * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
     *  
     *
     * 提示：
     *
     * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
     * 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     *
     * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，
     * 输出表示有符号整数 -1073741825。
     *  
     *
     * 进阶:
     * 如果多次调用这个函数，你将如何优化你的算法？
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/reverse-bits
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     * @param n
     * @return
     */
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        for (int i = 0; i < 16; i++) {
            int a = (n >>> (31 - i)) & 1;
            int b = (n >>> (i)) & 1;
            if(a != b) n = n ^ (1 << (31 - i)) ^ (1 << i);
        }
        return n;
    }

    /**
     * 方法二：32次循环，无判断
     * @param n
     * @return
     */
    public int reverseBits2(int n) {
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int tmp = ((n >>> (31 - i)) & 1) << i;
            ans |= tmp;
        }
        return ans;
    }

    /**
     * 476. 数字的补数
     *
     * 给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。
     *
     * 注意:
     *
     * 给定的整数保证在32位带符号整数的范围内。
     * 你可以假定二进制数不包含前导零位。
     * 示例 1:
     *
     * 输入: 5
     * 输出: 2
     * 解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。
     * 示例 2:
     *
     * 输入: 1
     * 输出: 0
     * 解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/number-complement
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     * @param num
     * @return
     */
    public int findComplement(int num) {
        int i = 0;
        int ans = 0;
        while ((num >>> i) != 0) {
            ans = ans | ((num & (1 << i)) == 0 ? (1 << i) : 0);
            i++;
        }
        return ans;
    }
}
